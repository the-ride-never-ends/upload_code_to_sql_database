import logging
from typing import Any


import mysql.connector


def check_cid_exists(db_connection: Any, cid: str) -> bool:
    """
    Check if a Content Identifier already exists in the codes table.

    Performs a safe, efficient database query to determine if a given CID
    is already present in the codes table. This function is crucial for
    deduplication, preventing identical code from being inserted multiple
    times. Uses parameterized queries for security and handles all database
    errors gracefully.

    The function is designed to be fail-safe: any error condition results
    in False being returned, allowing the upload process to continue with
    appropriate error handling at a higher level.

    Args:
        db_connection: Active MySQL database connection object as returned
            by start_database(). Must have read access to codes table.

        cid: Content Identifier string to check. Should be a valid IPFS CID
            as generated by create_code_entry(). Empty strings and None
            values are handled safely.

    Returns:
        bool: True if the CID exists in the codes table, False otherwise.
            Also returns False for any error conditions:
            - Database connection issues
            - Query timeouts
            - Table access problems
            - Invalid CID values (None, empty string)

    Query Behavior:
        - Uses SELECT with minimal columns for efficiency
        - Employs parameterized query to prevent SQL injection
        - Adds LIMIT 1 since we only need existence check
        - Creates and closes cursor within function scope
        - No data is retrieved beyond existence confirmation

    Error Handling:
        The function returns False (fail-safe) for:
        - Connection failures or timeouts
        - Missing codes table
        - Cursor creation failures
        - Query execution errors
        - Any unexpected database exceptions

        Errors are logged but not propagated to allow the upload
        process to continue with other files.

    Example:
        # Check if code already exists before uploading
        cid = "QmX7G8DPKj6L4Fr7RZNnPZyHTE8vPJNfV2mWYgFchVTqyY"

        if check_cid_exists(db_connection, cid):
            print(f"Code with CID {cid} already exists, skipping")
        else:
            # Proceed with upload
            upload_code_entry(db_connection, code_entry)

    Resource Management:
        - Creates a new cursor for each check
        - Always closes cursor, even on error
        - Does not affect connection's transaction state
        - Thread-safe when used with connection pooling

    Performance Considerations:
        - Query is optimized with index on cid column
        - No full table scan due to unique index
        - Minimal data transfer (existence check only)
        - Suitable for high-frequency deduplication checks

    Notes:
        - Empty string or None CID returns False without querying
        - Function is read-only, makes no modifications
        - Safe for concurrent use with proper connection pooling
        - Does not validate CID format, only checks existence
    """
    # Get logger for error reporting
    logger = logging.getLogger(__name__)

    # Handle invalid CID values early - return False without querying
    if cid is None or not cid.strip():
        return False

    cursor = None
    try:
        # Create cursor for this query
        cursor = db_connection.cursor()

        # Execute parameterized query to check CID existence
        # Uses SELECT 1 for minimal data transfer and LIMIT 1 for efficiency
        query = "SELECT 1 FROM metadata WHERE cid = %s LIMIT 1"
        cursor.execute(query, (cid,))

        # Check if any row was returned
        result = cursor.fetchone()
        return result is not None

    except mysql.connector.Error as e:
        # Log database errors but don't propagate - fail-safe behavior
        logger.error(f"Database error checking CID existence: {e}")
        return False

    except Exception as e:
        # Catch any unexpected errors
        logger.error(f"Unexpected error checking CID existence: {e}")
        return False

    finally:
        # Always close cursor to prevent resource leaks
        if cursor is not None:
            try:
                cursor.close()
            except Exception as e:
                # Log cursor close errors but don't propagate
                logger.error(f"Error closing cursor: {e}")
